import streamlit as st
import pandas as pd
import shap
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

st.set_page_config(page_title="SugAR Buddy - ‡∞°‡∞Ø‡∞æ‡∞¨‡±Ü‡∞ü‡∞ø‡∞∏‡±ç ‡∞ö‡±Ü‡∞ï‡±ç", layout="centered")
st.title("SugAR Buddy - ‡∞°‡∞Ø‡∞æ‡∞¨‡±Ü‡∞ü‡∞ø‡∞∏‡±ç ‡∞∞‡∞ø‡∞∏‡±ç‡∞ï‡±ç ‡∞ö‡±Ü‡∞ï‡∞∞‡±ç")

# üß† Train model inside the app
@st.cache_resource
def train_model():
    url = "https://raw.githubusercontent.com/plotly/datasets/master/diabetes.csv"
    df = pd.read_csv(url)
    X = df.drop("Outcome", axis=1)
    y = df["Outcome"]
    model = RandomForestClassifier()
    model.fit(X, y)
    return model, X.columns  # return column names too

model, feature_names = train_model()

# User inputs
age = st.slider("‡∞µ‡∞Ø‡∞∏‡±ç‡∞∏‡±Å (Age)", 18, 100)
bmi = st.number_input("‡∞¨‡∞ø‡∞é‡∞Æ‡±ç‚Äå‡∞ê (BMI)", 10.0, 50.0, step=0.1)
glucose = st.number_input("‡∞ó‡±ç‡∞≤‡±Ç‡∞ï‡±ã‡∞ú‡±ç ‡∞≤‡±Ü‡∞µ‡∞≤‡±ç", 50, 200)
bp = st.number_input("‡∞¨‡±ç‡∞≤‡∞°‡±ç ‡∞™‡±ç‡∞∞‡±Ü‡∞∑‡∞∞‡±ç", 40, 130)
insulin = st.number_input("‡∞á‡∞®‡±ç‡∞∏‡±Å‡∞≤‡∞ø‡∞®‡±ç ‡∞∏‡±ç‡∞•‡∞æ‡∞Ø‡∞ø", 0.0, 500.0, step=0.1)
skin_thickness = st.number_input("‡∞ö‡∞∞‡±ç‡∞Æ‡∞Ç ‡∞Æ‡∞Ç‡∞¶‡∞Ç", 0, 100)
pregnancies = st.slider("‡∞ó‡∞∞‡±ç‡∞≠‡∞ß‡∞æ‡∞∞‡∞£‡∞≤ ‡∞∏‡∞Ç‡∞ñ‡±ç‡∞Ø", 0, 15)
dpf = st.number_input("‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨ ‡∞ö‡∞∞‡∞ø‡∞§‡±ç‡∞∞ (DPF)", 0.0, 2.5)

# Predict
if st.button("‡∞∞‡∞ø‡∞∏‡±ç‡∞ï‡±ç ‡∞§‡±Ü‡∞≤‡±Å‡∞∏‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø"):
    # Convert list to DataFrame with column names
    data = pd.DataFrame([[pregnancies, glucose, bp, skin_thickness, insulin, bmi, dpf, age]], columns=feature_names)

    prediction = model.predict(data)[0]
    proba = model.predict_proba(data)[0][prediction]
    result = "‡∞Ö‡∞ß‡∞ø‡∞ï ‡∞∞‡∞ø‡∞∏‡±ç‡∞ï‡±ç" if prediction == 1 else "‡∞§‡∞ï‡±ç‡∞ï‡±Å‡∞µ ‡∞∞‡∞ø‡∞∏‡±ç‡∞ï‡±ç"
    st.subheader(f"ü©∫ ‡∞´‡∞≤‡∞ø‡∞§‡∞Ç: {result} ({proba*100:.2f}%)")

    # SHAP Explanation
    explainer = shap.TreeExplainer(model)
    shap_values = explainer.shap_values(data)

    st.set_option('deprecation.showPyplotGlobalUse', False)
    shap.initjs()
    st.write("üìä ‡∞°‡∞Ø‡∞æ‡∞¨‡±Ü‡∞ü‡∞ø‡∞∏‡±ç ‡∞∞‡∞ø‡∞∏‡±ç‡∞ï‡±ç ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡±Å (SHAP):")
    shap.force_plot(explainer.expected_value[1], shap_values[1], data, matplotlib=True)
    st.pyplot(bbox_inches='tight')
